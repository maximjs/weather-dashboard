{"version":3,"sources":["App.module.sass","App.js","serviceWorker.js","index.js"],"names":["module","exports","app","dashboard","dashboardPlaceholder","weather","weatherDelete","inputCity","loading","input","inputValid","inputInvalid","inputCityAdd","inputCityDelete","error","apiKey","App","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","handleInput","e","value","target","isValid","validate","message","setState","inputValue","isValidInput","string","search","handleInputClear","handleDelete","id","filteredData","state","data","filter","el","saveToStorage","preparedData","JSON","stringify","localStorage","setItem","handleAdd","_this$state","findIndex","item","name","toLowerCase","concat","url","isLoading","fetch","then","response","json","resp","cod","Error","dataResp","temp","main","description","iconcode","icon","newData","toConsumableArray","catch","err","renderDashboard","map","temperature","toFixed","iconUrl","react_default","a","createElement","className","styles","key","src","alt","onClick","renderEmpty","initData","parse","getItem","_cn","_this$state2","inputClass","cn","defineProperty","onChange","placeholder","disabled","react_loading_default","type","color","width","height","length","Component","Boolean","window","location","hostname","match","ReactDOM","render","src_App","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.ae8fde20.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"app\":\"App_app__203lu\",\"dashboard\":\"App_dashboard__2kOAt\",\"dashboardPlaceholder\":\"App_dashboardPlaceholder__3mnKn\",\"weather\":\"App_weather__1CKSA\",\"weatherDelete\":\"App_weatherDelete__1RQTs\",\"inputCity\":\"App_inputCity__1C4N_\",\"loading\":\"App_loading__37isf\",\"input\":\"App_input__2yLKg\",\"inputValid\":\"App_inputValid__2-aZb\",\"inputInvalid\":\"App_inputInvalid__3GvZi\",\"inputCityAdd\":\"App_inputCityAdd__1KtQo\",\"inputCityDelete\":\"App_inputCityDelete__ONbCP\",\"error\":\"App_error__KPbnW\"};","import React, { Component } from 'react';\nimport cn from 'classnames';\nimport ReactLoading from 'react-loading';\nimport styles from './App.module.sass';\n\nconst apiKey = 'ff143ed1daddb873cb08192d68e3aa1a';\n\nclass App extends Component {\n  constructor(props) {\n    super(props);\n    const initData = JSON.parse(localStorage.getItem('cities'));\n    this.state = {\n        inputValue: '',\n        isValidInput: null,\n        isLoading: false,\n        data: initData || [],\n        error: '',\n      };\n  }\n\n  handleInput = e => {\n    const { value } = e.target;\n    const isValid = this.validate(value);\n    const message = (!isValid && value !== '') ? `Use only Latin letters and numbers` : '';\n    this.setState({\n      inputValue: value,\n      isValidInput: value === '' ? null : isValid,\n      error: message,\n    });\n  }\n\n  validate = string => {\n    return (string.search(/^[a-zA-Z0-9]+$/i) !== -1);\n  }\n\n  handleInputClear = () => {\n    this.setState({ inputValue: '', isValidInput: null, error: '' });\n  }\n\n  handleDelete = id => () => {\n    const { data } = this.state;\n    const filteredData = data.filter(el => el.id !== id);\n    this.saveToStorage(filteredData);\n    this.setState({ data: filteredData });\n  }\n\n  saveToStorage = data => {\n    const preparedData = JSON.stringify(data);\n    localStorage.setItem('cities', preparedData);\n  }\n\n  handleAdd = () => {\n    const { inputValue, isValidInput, data } = this.state;\n    const isCityInData = data.findIndex(item => item.name.toLowerCase() === inputValue.toLowerCase()) !== -1;\n    if (isCityInData) {\n      const message = `The city ${inputValue} is already on the dashboard`;\n      this.setState({ inputValue: '', isValidInput: null, error: message });\n      return;\n    }\n    if (!inputValue || !isValidInput) {\n      return;\n    }\n    const url = `https://api.openweathermap.org/data/2.5/weather?q=${inputValue}&units=metric&appid=${apiKey}`;\n    this.setState({ isLoading: true, error: '' });\n    fetch(url)\n      .then(response => response.json())\n      .then(resp => {\n        if (resp.cod !== 200) {\n          throw new Error(resp.message);\n        }\n        const dataResp = {\n          id: resp.id,\n          name: resp.name,\n          temp: resp.main.temp,\n          description: resp.weather[0].description,\n          iconcode: resp.weather[0].icon,\n        };\n        const newData = [...data, dataResp];\n        this.saveToStorage(newData);\n        this.setState({\n          isLoading: false,\n          data: newData,\n          inputValue: '',\n          isValidInput: null,\n        });\n      })\n      .catch(err => {\n        this.setState({ isLoading: false, error: err.message });\n      });\n  }\n\n  renderDashboard = () => {\n    const { data } = this.state;\n    return data.map(item => {\n      const { id, name, temp, description, iconcode } = item;\n      const sign = temp >= 0 ? '+' : '';\n      const temperature = `${sign}${temp.toFixed(1)} â„ƒ`;\n      const iconUrl = 'http://openweathermap.org/img/w/' + iconcode + '.png';\n      return (\n        <div className={styles.weather} key={id}>\n          <h3>{name}</h3>\n          <div>{temperature}</div>\n          <img src={iconUrl} alt={description} />\n          <div onClick={this.handleDelete(id)} className={styles.weatherDelete}>Delete</div>\n        </div>\n      );\n    });\n  };\n\n  renderEmpty = () => (\n    <div className={styles.dashboardPlaceholder}>\n      Dashboard is empty\n    </div>\n  );\n\n  render() {\n    const { inputValue, isValidInput, data, isLoading, error } = this.state;\n    const inputClass = cn({\n      [styles.input]: true,\n      [styles.inputValid]: isValidInput === true,\n      [styles.inputInvalid]: isValidInput === false,\n    });\n    return (\n      <div className={styles.app}>\n        <div className={styles.inputCity}>\n          <input className={inputClass} onChange={this.handleInput} value={inputValue} placeholder=\"City...\" />\n          <button className={styles.inputCityAdd} onClick={this.handleAdd} disabled={isLoading}>Add</button>\n          <button className={styles.inputCityDelete} onClick={this.handleInputClear} disabled={isLoading}>Clear</button>\n          {error && <div className={styles.error}>{error}</div>}\n          {isLoading && <ReactLoading type=\"spinningBubbles\" color=\"grey\" width=\"40\" height=\"40\" className={styles.loading} />}\n        </div>\n        <div className={styles.dashboard}>\n          {data.length > 0 ? this.renderDashboard() : this.renderEmpty()}\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}